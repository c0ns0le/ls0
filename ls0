#!/usr/bin/env perl
# ls0: A "ls" replacement that null-terminates its output filenames.
# To see the output on the console, pipe it to cat -A (nulls show as ^@)
# or to od -c.
# XXX marks features to be implemented; TODO marks other items to do.

# TODO? add an option to prune specific directories, files, globs, ...?

# Style note: Hungarian prefixes are used on scalars:
#   "hr" (hash ref), "lr" (list ref), "sr" (string ref), "nr" (numeric ref),
#   "b" or "is" (boolean), "s" (string), "wli" (Worklist_Item instance)

package Com::DevWrench::Ls0;

# === Code ========================================================= {{{1
# Declarations {{{2

# --- Syntax ---
use strict;
use warnings;

use constant { false => !!0, true  => !!1 };

# --- Imports ---
use Getopt::Long;
use Pod::Usage;
use File::Spec::Functions;
use File::Basename 'fileparse';
use File::stat;
use Fcntl ':mode';
#use File::Glob ':bsd_glob';
use Data::Dumper;
#use Class::Struct;

# --- Constants ---
use constant DEBUG => true;

use constant {          # shell exit codes
    EXIT_OK => 0,          # success
    EXIT_FILE_ERR => 1,    # couldn't access at least one file
    EXIT_PARAM_ERR => 2,   # couldn't understand the command line
};

use constant {          # record terminators
    TERM_NULL => "\0",
    TERM_EOL => "\n",   # which will be translated to CRLF if necessary.
};                      # per http://www.perlmonks.org/?node_id=890769

# Regexes
use constant RE_DOT_OR_DOTDOT => qr/^\.{1,2}$/;

# --- Command-line arguments ---
my %CMDLINE_OPTS = (
    # hash from internal name to either:
    #   - string of Getopt::Long options, beginning with the option name; or
    #   - tuple [getopt-options, default-value]
    # They are in alphabetical order by option name, lowercase before upper.
    # No defaults for negatable options ('!') or string-value options ('=s').

    ALL_DOT => ['a', false],
    MOST_DOT => ['A', false],
    ESCAPE_OUTPUT_ONECHAR => 'b',
        # No default so we can tell what the user asked for
    DIR_AS_DIR => ['d', false],
    OUTPUT_TERM_IS_EOL => 'eol!',
        # terminator for each entry, including the last
    ESCAPE_OUTPUT => 'escape!',

    # "atfiles": Files listing other inputs.
    AT_FILE => 'from|@=s@',         # Atfile, NULL separated.
    AT_FILE_EOL => 'fromeol=s@',    # Atfile, EOL separated (platform-specific)

    DO_GLOB => ['glob', false],
    # Note: --help reserved
    LEAVES_ONLY => ['leaf', false],
    # Note: --man reserved
    SORT_OPT_REVERSE => ['r', false],
    RECURSE => ['R', false],
    RECURSIVE_GLOB => ['rglob', false],

    SORT_NAME => 'sort=s',
    SORT_OPT_SIZE => ['S', false],
    SORT_OPT_TIME => ['t', false],      # Sort on some time (mtime by default)
    SORT_OPT_WHICHTIME => 'time=s',     # Which time to sort on
    SORT_OPT_NOSORT => ['U', false],

    LIKE_XARGS => ['xargs', false],

    # Other options not specified on the command line, but included in the hash
    #SHOULD_ESCAPE => 'should_escape',       # Internal: whether or not to escape
    #OUTPUT_TERM => 'output_terminator',     # \n or \0
    #DEPTH => 'depth',
    #ONE_ARG => 'one_arg',       # if only one arg provided
    #SORT => 'whichsort',        # how to sort
    #SORTFIELD => 'sortfield',   # which field of the stat structure to sort on
    #SORTDIR => 'sortdir',       # default order: 1 for asc; -1 for desc
    #GLOBS => 'globs',           # list ref of the globs to check

    ADDL_PATHSPECS => 'fromatfiles',    # items listed in the atfiles
); # %CMDLINE_OPTS

# Allowable sort types
use constant {
    SORT_BY_NONE => 'none',
    SORT_BY_NAME => 'name',     # a-z unless reverse.  Default.
    #SORT_BY_EXT => 'ext',       # extension XXX
    SORT_BY_NUM => 'num',       # A numeric sort on stat->$sortfield
        # defaults: times newest first; size largest first
    #SORT_BY_VER => 'ver',      # version within a filename.
        # XXX Per https://www.gnu.org/software/coreutils/manual/html_node/Details-about-version-sort.html
        # TODO support this?  Require the user specify the filename encoding?
};

# Names of File::Stat fields we can sort on
use constant {
    SORTFIELD_ATIME => 'atime',
    SORTFIELD_CTIME => 'ctime',
    SORTFIELD_MTIME => 'mtime',     # default
    # TODO add more
};

# --- Worklist Items ---
# What ls0 needs to do is defined by a worklist, a list of Worklist_Item refs.
# Each Worklist_Item includes text and various flags.

package Worklist_Item {
    use constant { false => 0, true  => 1 };    # constants are per-package
    use constant DEBUG => true;

    use fields qw(srtext top fromglob visible stat);
        # TODO later: use Class::Struct instead?

    sub new {   # ($self, $srText[, $bIsTop]) -> Worklist_Item
        my ($class, $srText, $isTop) = @_;

        my Worklist_Item $self = fields::new($class) unless ref $class;
        @$self{'top', 'fromglob', 'visible', 'stat'} =
            (false, false, true, undef);

        # Fill in from parameters
        $self->text($srText);
        if(defined $isTop) { $self->{top} = $isTop; }
        return $self;
    } #new()

    sub text {  # ($self[, $sText/srText]) -> string: setter if $sText provided
                # can take a string or a reference.
        my Worklist_Item $self = shift;
        if(@_) {
            my $arg = shift;
            if(ref($arg) eq "SCALAR") {
                $self->{srtext} = $arg;
            } else {
                $self->{srtext} = \$arg;
            }
        } #endif text provided
        return ${$self->{srtext}};  # always a getter
    } #text() setter/getter

    sub suppress {  # ($self) -> undef
        my Worklist_Item $self = shift;
        $self->{visible} = false;
    } #suppress() setter
} # Worklist_Item

# --- Forward declarations ---

# Do the work
sub process_worklist;
    # takes hrOpts, lrWorklist, lrOutputWorklist, and lrFailures.
    # Adds to lrOutputWorklist any outputs.  Adds to lrFailures any
    # string error messages.  May modify @$lrWorklist.
    # Returns a bool indicating whether at least one worklist item
    # is to be printed as a result.

sub process_worklist_item;
    # takes (hrOpts, wli, lrFailures, lrAddl [, bDontGlob].
    # Adds to lrAddl any pathspecs needing processing.  This yields a breadth-
    # first search of the space.  May modify $wli.
    # Returns a bool indicating whether the worklist item is visible.

sub sort_results;
    # takes hrOpts, lrWorklist; returns a reference to the sorted list.
    # Per the docs for sort, the result list includes aliases to the
    # elements of $lrWorklist, rather than copies.

# Utility routines
sub make_printable;     # Returns a printable representation of the arg string
sub make_worklist;      # takes lrStrings, bIsTop; returns lrWorklist.

# Command-line handling
sub parse_command_line_into;    # takes and modifies hrOpts; modifies @ARGV
sub read_entries;               # read entries from an atfile
# }}}2

# === Main ========================================================= {{{2

main();         # Invoke.
exit(EXIT_OK);  # if main() or something it called didn't already exit().

sub main {
    my %opts;           # everything that controls the behaviour of ls0
    my $lrWorklist;     # what we are being asked to process

    # since we are usually not printing newlines, don't line-buffer STDOUT
    $| = 1;

    parse_command_line_into \%opts;     # Modifies @ARGV.  May exit().

    # Set up for recursive glob: If it has been requested, stash the
    # provided pathspecs to try at each directory we visit.
    # We don't need to stash for non-recursive glob since the
    # patterns are already in @ARGV.
    $opts{GLOBS} = @ARGV if $opts{RECURSIVE_GLOB} && @ARGV;

    # Start with what was given on the command line (parse_c_l_into adds
    # '.' to @ARGV if no args were given, so @ARGV is always nonempty here).
    $lrWorklist = make_worklist \@ARGV, true;   # true => top-level args

    # Add the atfiles to the list
    if(@{$opts{ADDL_PATHSPECS}}) {
        my $lrMoreWork = make_worklist $opts{ADDL_PATHSPECS}, true;
        push @$lrWorklist, @$lrMoreWork;
    }

    # Do it, Rockapella!
    my @failures;   # which pathspecs we couldn't process
    if(process_worklist(\%opts,
                            $lrWorklist, $lrWorklist, \@failures)) {
                        #                ^^^^^^^^^^^ output
                        #   ^^^^^^^^^^^ input

        # Sort however the user wanted
        my $lrSortedWorklist = sort_results(\%opts, $lrWorklist);

        # Dump the (possibly escaped) results
        my $trm = $opts{OUTPUT_TERM};
        my $esc = $opts{SHOULD_ESCAPE};

        for my Worklist_Item $wli (@$lrSortedWorklist) {
            # skip ones we cleared
            next unless $wli->{visible};

            # escape if requested
            $wli->text(make_printable ($wli->text =~ s|^./||r)) if $esc;
                # like ls(1), don't start with "./"  ^^^^^^^^

            print $wli->text, $trm;
        } # next $result
    } # endif any results

    # Report any errors
    if(@failures) {
        # Print all the errors, converting nonprintable characters to hex
        # escapes.  Errors are currently not sorted.
        print STDERR (
            join("\n", (map make_printable, @failures) ),
            "\n"
        );
        exit EXIT_FILE_ERR;
    } #endif @failures

} # main()

# === Worker routines ===================================================

sub process_worklist {
    my ($hrOpts, $lrProvidedWorklist, $lrOutputWorklist, $lrFailures,
        $subsid) = @_;

    my $bHaveVisibleResults = false;        # whether there's a result to print
    my $lrWorklist = $lrProvidedWorklist;   # changes as we run
    my @addl;   # this will hold paths to be processed next.
                # Using @addl means we don't have to mutate a possibly-long
                # $lrWorklist.

    my $done = false;
    while(!$done) {
        @addl = ();     # always start fresh

        for my Worklist_Item $wli (@$lrWorklist) {
            my $vis =
                process_worklist_item($hrOpts, $wli, $lrFailures, \@addl);
            $bHaveVisibleResults ||= $vis;
                # Can't do $bHR ||= process_item() because ||= short-circuits
        } # foreach $path

        # If we are processing anything other than the output worklist,
        # tack the results onto that ever-growing list.  We do this in
        # case @ARGV is a long list from an xargs --- we don't want to
        # copy it, just in case.
        if($lrWorklist != $lrOutputWorklist) {
            push @$lrOutputWorklist, @$lrWorklist;
        }

        # Set up for the next iteration
        $lrWorklist = make_worklist \@addl;
        $done = !@addl;

    } # while !$done

    return $bHaveVisibleResults;
} # process_worklist()

sub process_worklist_item {
    my ($hrOpts, $wli, $lrFailures, $lrAddl) = @_;

    # XXX implement globs
    #my $pathspec = $$srPathspec;
    #
    #if($hrOpts->{DO_GLOB} && !bDontGlob) {
    #    my @results = bsd_glob($pathspec);
    #    if(!@results) {
    #        push @$lrFailures, "No files matched '" . make_printable $$srPathspec . "'.";
    #        return;
    #    } elsif(scalar @results > 1) {
    #        push @$lrAddl, @results;
    #       $$srPathspec=undef;     # Remove the glob (or something).
    #        return;                # Different for recursive glob.
    #    } else {
    #        $pathspec = $results[0];
    #            # If it was a single file, process it now.
    #            # XXX track whether pathspecs came from glob and don't
    #            # re-glob them
    #    }
    #} # endif DO_GLOB

    # Process this worklist item, which represents a single directory entry

    my $item_text = $wli->text;
    my $fileinfo = stat($item_text);

    if(!$fileinfo) {
        push @$lrFailures, "Could not stat $item_text";
        $wli->suppress;     # don't display it, since it's not actually there!
        return;
    }

    $wli->{stat} = $fileinfo;  # stash for use by the output code
    #print STDERR Dumper($wli->{stat}) if DEBUG;
    my ($basename, $dirs) = fileparse($item_text);
        # Don't use splitpath(), which chokes on '.git/.'.

#    print STDERR "Processing $item_text (basename  -$basename-, dir -$dirs-)\n"
#        if DEBUG;

    # Shorthand for the context
    my $all_dot = $hrOpts->{ALL_DOT};
    my $most_dot = $hrOpts->{MOST_DOT};
    my $recursive = $hrOpts->{RECURSE};
    my $dash_d = $hrOpts->{DIR_AS_DIR};    # dash_d => not recursive
    my $isTop = $wli->{top};
        # "top-level" means it was specified on the command line.
    my $one_arg = $hrOpts->{ONE_ARG};

    # Shorthand for special cases in the names
    my $isD = $basename eq '.';
    my $isDD = $basename eq '..';
    my $isDotfile = $basename =~ /^\./;

    my $isWanted = (    # dotfile-based filtering
        (!$isDotfile) ||                    # not a dotfile
        ($all_dot) ||                       # -a: keep dotfiles
        ($most_dot && !($isD || $isDD)) ||  # -A: keep except . and ..
        ($isTop)                            # always list what the user
    );                                      # expressly asked for.
        # Note: $isTop is set for command-line args and for atfile entries.

#    print STDERR "  -a $all_dot  -A $most_dot  -d $dash_d  -R $recursive ".
#        "top $isTop  one_arg $one_arg  . $isD  .. $isDD  .* $isDotfile  " .
#        "wanted $isWanted\n"
#        if DEBUG;
#    print STDERR "  is dir \n" if DEBUG &&  S_ISDIR($fileinfo->mode);
#    print STDERR "  is file\n" if DEBUG && !S_ISDIR($fileinfo->mode);

    if(S_ISDIR($fileinfo->mode)) {
        # Figure out what to do

        my $bShouldSuppress = !$isWanted;   # by default, just list it as a
        my $bShouldDescend = false;         # regular entry (if we want it)

        # A top-level arg:
        #   Print it unless only one was given (e.g., for "ls ..")
        #   Descend unless -d.  -R is irrelevant because we descend by default.
        #   ** However, if only one arg is given and -d, do list it,
        #      since that's exactly the one thing the user wanted to see.
        if( $isTop ) {
            $bShouldSuppress = ($one_arg && !$dash_d);
            $bShouldDescend = !$dash_d;
        }

        elsif( $isWanted ) {            # A non-toplevel we want: recurse
            $bShouldDescend =           # if requested, and not . or .. .
                $recursive && !($isD || $isDD);
        }   # Note -d trumps -R, so we don't have to test $dash_d.

        # --- Now that we've figured out what to do, go do it. ---
        if($bShouldSuppress) {
            $wli->suppress;
        }

        if($bShouldDescend) {
            my $dirh;
            if(!opendir($dirh, $item_text)) {
                push @$lrFailures, "Could not read directory $item_text";
            } else {
                push @$lrAddl,
                    (map { my $rv = catfile $item_text, $_;
                            #print STDERR "    Added -$rv-\n" if DEBUG;
                            $rv } readdir($dirh));
                    # Also pushes . and .., which are ignored by the code above
                    # when we get to them in a later call.
            } #endif dir opened OK
        } # endif recursing

    } else {    # not a directory - treat files, pipes, links, &c. all as files
        if(!$isWanted) {        # Drop dotfiles unless requested
#            print STDERR "  suppressing\n" if DEBUG;
            $wli->suppress;
        }
    } #endif is a directory else

#    print STDERR "  visible ", $wli->{visible}, "\n" if DEBUG;
    return $wli->{visible};
} # process_worklist_item()

sub sort_results {  # ($hrOpts, $lrWorklist) -> $lrSortedWorklist
    my ($hrOpts, $lrWorklist) = @_;
    my @sorted;     # return array
    my $sort_type = $hrOpts->{SORT};

    my $direction = $hrOpts->{SORT_OPT_REVERSE} ? -1 : 1;
        # Invert the sense of the comparisons if requested
    $direction *= $hrOpts->{SORTDIR};
        # Take into account the default order for this sort type

    if($sort_type eq SORT_BY_NONE) {
        return $lrWorklist;     # *** EXIT POINT ***
    }

    # Sort
    if($sort_type eq SORT_BY_NAME) {
        @sorted = sort
            { $direction * ($a->text cmp $b->text) }
            @$lrWorklist;   # Note: sort on byte values, not characters.

    } elsif($sort_type eq SORT_BY_NUM) {
        my $fld = $hrOpts->{SORTFIELD};
        #print STDERR "Numeric sort on ", $fld, "\n" if DEBUG;
        @sorted = sort
            { $direction * ($a->{stat}->$fld() <=> $b->{stat}->$fld()) }
            @$lrWorklist;

    } else {
        die "Unsupported sort type $sort_type\n";   # TODO
    }
    return \@sorted;
} # sort_results()
# }}}2

# === Utility routines ============================================= {{{2

sub make_worklist {
    my $lrStrings = shift;  # May be a reference to an empty list
    my $isTop = @_ ? shift : false;
    my @srStringRefs = \(@$lrStrings);
        # list of string refs to each element of the provided list

    my @worklist = map { Worklist_Item::->new($_, $isTop) } @srStringRefs;

    return \@worklist;
} # make_worklist()

sub make_printable {
# Return a printable version (octal escapes) of the original string.
    my $in = @_ ? $_[0] : $_;
    return $in =~ s/(\\|[^[:print:]])/'\\'.(sprintf "%03o", ord $1)/ger;
        # For hex, use s/.../'\x'.unpack('H*', $1)/ger per
        # http://perldoc.perl.org/perlpacktut.html#The-Basic-Principle
} # make_printable()
# }}}2

# === Command line ================================================= {{{2

sub parse_command_line_into {
# Takes a reference to a hash into which the options will go.
# Exits on failure or if help text was printed.
# Modifies @ARGV, since the input command line may well be a long list from
# xargs, and we don't want to make an expensive copy.

    my $hrOptsOut = shift;

    # Return the short name of a command-line option
    sub justname { return $_[0] =~ s/[^[a-zA-Z_].*$//r; }

    # Map internal name to option name
    sub optname { return justname(ref($CMDLINE_OPTS{$_[0]}) ?
                            $CMDLINE_OPTS{$_[0]}[0] : $CMDLINE_OPTS{$_[0]}); }

    # Easier syntax for checking whether optional args were provided.
    # Syntax thanks to http://www.perlmonks.org/?node_id=696592
    local *have = sub { return exists($hrOptsOut->{$_[0]}); };

    # --- Parse the options ---
    Getopt::Long::Configure 'gnu_getopt';

    { # Set defaults so we don't have to test them with exists().
        my @keys_with_defaults =
            grep { ref($CMDLINE_OPTS{$_}) } keys %CMDLINE_OPTS;
        my @kvs =
            map { optname($_) => $CMDLINE_OPTS{$_}[1] }
            @keys_with_defaults;    # map option name to default value

        %$hrOptsOut = ( @kvs );
    } #end default-setting

    # Get options
    GetOptions($hrOptsOut,  # destination hash
        'usage|?', 'help', 'man',
        map { ref($_) ? $_->[0] : $_ } values %CMDLINE_OPTS,    # options strs
        )
    or pod2usage(-verbose => 0, -exitval => EXIT_PARAM_ERR);    # unknown opt

    # Help, if requested
    pod2usage(-verbose => 0, -exitval => 1) if have('usage');
    pod2usage(-verbose => 1, -exitval => 1) if have('help');
    pod2usage(-verbose => 2, -exitval => 1) if have('man');

    { # Map the option names from GetOptions back to the internal names we use
        my %revmap = map {  optname($_) => $_ } keys %CMDLINE_OPTS;
        for my $optname (keys %$hrOptsOut) {
            $hrOptsOut->{$revmap{$optname}} = $hrOptsOut->{$optname};
        }
    } #end option mapping.

    # --- Process implied options and defaults ---

    # Default non-tty input is --xargs
    $hrOptsOut->{LIKE_XARGS} = true
        unless(@ARGV || (-t STDIN) || have('AT_FILE') || have('AT_FILE_EOL'));

    # --xargs implies "--from -"
    if($hrOptsOut->{LIKE_XARGS}) {
        if(have('AT_FILE')) {
            push(@{$hrOptsOut->{AT_FILE}}, "-")
        } else {
            $hrOptsOut->{AT_FILE} = ["-"];
        }
    } #endif --xargs

    # -d overrides -R
    if($hrOptsOut->{DIR_AS_DIR}) {
        $hrOptsOut->{RECURSE} = false;
    }

    # --rglob implies -R and --glob
    if($hrOptsOut->{RECURSIVE_GLOB}) {
        if(!$hrOptsOut->{DIR_AS_DIR}) {
            $hrOptsOut->{RECURSE} = true;
            $hrOptsOut->{DO_GLOB} = true;
        } else {
            print STDERR "Can't use --rglob and -d together\n";
            exit EXIT_PARAM_ERR;
        }
    } #endif --rglob

    # --- Sorting options ---
    # XXX expand to support other sorts

    # Collapse --sort to the equivalent - options
    if(have('SORT_NAME')) {
        if($hrOptsOut->{SORT_NAME} eq "none") {
            $hrOptsOut->{SORT_OPT_NOSORT} = true;
        } elsif ($hrOptsOut->{SORT_NAME} eq "extension") {
            print STDERR "--sort=extension not yet supported.\n"; #XXX
            exit EXIT_PARAM_ERR;
        } elsif ($hrOptsOut->{SORT_NAME} eq "size") {
            $hrOptsOut->{SORT_OPT_SIZE} = true;
        } elsif ($hrOptsOut->{SORT_NAME} eq "time") {
            $hrOptsOut->{SORT_OPT_TIME} = true;
        } elsif ($hrOptsOut->{SORT_NAME} eq "version") {
            print STDERR "--sort=version not yet supported.\n"; #XXX
            exit EXIT_PARAM_ERR;
        } else {
            print STDERR "Unknown sort type --sort=",
                make_printable($hrOptsOut->{SORT_NAME}), "\n";
            exit EXIT_PARAM_ERR;
        }
    } #endif --sort specified

    { # Sanity checks: did the user ask for more than one sort?
        my @sorts;
        push(@sorts,'SORT_OPT_SIZE') if $hrOptsOut->{SORT_OPT_SIZE};
        push(@sorts,'SORT_OPT_TIME') if $hrOptsOut->{SORT_OPT_TIME};
        push(@sorts,'SORT_OPT_NOSORT') if $hrOptsOut->{SORT_OPT_NOSORT};

        if(@sorts > 1) {
            print "I can't sort by multiple keys (",
                join(" ", map { '-' . $_ } @sorts), ").\n";
            exit EXIT_PARAM_ERR;
        }
    } # end multi-sort check

    # Fill in the internal variables for each sort
    if($hrOptsOut->{SORT_OPT_NOSORT}) {
        if($hrOptsOut->{SORT_OPT_REVERSE}) {
            print STDERR "Can't reverse a non-sorted list (-U -r).\n";
            exit EXIT_PARAM_ERR;
        }
        $hrOptsOut->{SORT} = SORT_BY_NONE;

    } elsif($hrOptsOut->{SORT_OPT_SIZE}) {
        $hrOptsOut->{SORT} = SORT_BY_NUM;
        $hrOptsOut->{SORTDIR} = -1;    # descending by default
        $hrOptsOut->{SORTFIELD} = "size";

    } elsif($hrOptsOut->{SORT_OPT_TIME}) {
        $hrOptsOut->{SORT} = SORT_BY_NUM;
        $hrOptsOut->{SORTDIR} = -1;    # descending by default

        my %time_types = (      # Possible ways to sort by time.
            # '?' is reserved
            atime => SORTFIELD_ATIME,   # ls(1) gives lots of synonyms.
            access => SORTFIELD_ATIME,
            use => SORTFIELD_ATIME,
            ctime => SORTFIELD_CTIME,
            status => SORTFIELD_CTIME,
            mtime => SORTFIELD_MTIME,   # a few others
            change => SORTFIELD_MTIME,
        );

        my $which = have('SORT_OPT_WHICHTIME') ?
            $hrOptsOut->{SORT_OPT_WHICHTIME} : SORTFIELD_MTIME;

        if(!exists($time_types{$which})) {
            print STDERR "Unknown time type --time=",
                make_printable($which), "\nValid values are: ",
                join(", ", sort keys %time_types), ".\n";
            exit EXIT_PARAM_ERR;
        }
        $hrOptsOut->{SORTFIELD} = $time_types{$which};

    } else {    # default sort
        $hrOptsOut->{SORT} = SORT_BY_NAME;
        $hrOptsOut->{SORTDIR} = 1;     # ascending by default
    }

    # --- Output options ---

    # Handle -b, --escape, --noescape.  --noescape always wins if given.

    if(     have('ESCAPE_OUTPUT') && !$hrOptsOut->{ESCAPE_OUTPUT}) { #--noescape
        $hrOptsOut->{SHOULD_ESCAPE} = false;                        #always wins

    } elsif(have('ESCAPE_OUTPUT') && $hrOptsOut->{ESCAPE_OUTPUT}) { #--escape
        $hrOptsOut->{SHOULD_ESCAPE} = true;

    } elsif(have('ESCAPE_OUTPUT_ONECHAR') &&                        # -b
                $hrOptsOut->{ESCAPE_OUTPUT_ONECHAR}) {
        $hrOptsOut->{SHOULD_ESCAPE} = true;

    } else {                    # By default, escape if outputting to a tty.
        $hrOptsOut->{SHOULD_ESCAPE} = (-t STDOUT);
    }

    # Handle --eol, --noeol.  --noeol always wins if given.

    if (    have('OUTPUT_TERM_IS_EOL') && !$hrOptsOut->{OUTPUT_TERM_IS_EOL}) {
        $hrOptsOut->{OUTPUT_TERM} = TERM_NULL;          # --noeol always wins

    } elsif(have('OUTPUT_TERM_IS_EOL') && $hrOptsOut->{OUTPUT_TERM_IS_EOL}) {
        $hrOptsOut->{OUTPUT_TERM} = TERM_EOL;                       # --eol

    } else {                                        # default: EOL if escaping
        $hrOptsOut->{OUTPUT_TERM} =
            $hrOptsOut->{SHOULD_ESCAPE} ? TERM_EOL : TERM_NULL;
    }

    # --- Globbing ---

    if($hrOptsOut->{RECURSIVE_GLOB} || $hrOptsOut->{DO_GLOB}) {
        print STDERR "Globbing not yet implemented.\n";     # XXX
        exit EXIT_PARAM_ERR;
    }

    # --- Leaves-only mode ---

    if($hrOptsOut->{LEAVES_ONLY}) {
        print STDERR "--leaf not yet implemented.\n";       # XXX
        exit EXIT_PARAM_ERR;
    }

    # --- Atfiles ---

    { # Check for duplicates
        my @filenames = (   # all the filenames together
            have('AT_FILE') ?         @{$hrOptsOut->{AT_FILE}} :     (),
            have('AT_FILE_EOL') ?    @{$hrOptsOut->{AT_FILE_EOL}} : ()
        );
        my %seen;   # which filenames we've seen
        my $ok = true;

        for my $fn (@filenames) {
            if(exists $seen{$fn}) {
                print STDERR "Filename ", make_printable($fn),
                        " listed more than once.\n";
                $ok = false;
            }
            $seen{$fn}=true;
        } # foreach $fn

        if(!$ok) {
            exit EXIT_PARAM_ERR;
        }
    } #end duplicate-check

    { # read atfiles
        my @entries;    # list of all the pathspecs in the atfiles

        if(have('AT_FILE')) {
            my $lrEntries = read_entries(TERM_NULL, $hrOptsOut->{AT_FILE});
            push @entries, @$lrEntries;
        } # endif --from

        if(have('AT_FILE_EOL')) {
            my $lrEntries = read_entries(TERM_EOL, $hrOptsOut->{AT_FILE_EOL});
            push @entries, @$lrEntries;
        } # endif --fromeol

        $hrOptsOut->{ADDL_PATHSPECS} = \@entries;
    } #end read atfiles

    # --- If we have no args or atfiles, process the current dir. ---
    # If atfiles were specified, don't add cwd even if the atfiles
    # didn't include any pathspecs.
    unless(@ARGV || have('AT_FILE') || have('AT_FILE_EOL')) {
        push @ARGV, curdir();
    }

    # How many args?  This is a special case: don't print the arg name
    # if it was the only arg and was a directory.
    $hrOptsOut->{ONE_ARG} = (scalar @ARGV == 1);

} # parse_command_line_into()

sub read_entries {
# takes $sTerm and $lrFilenames; returns $lrEntries.
    my ($sTerm, $lrFilenames) = @_;
    my @retval;

    for my $fn (@$lrFilenames) {
        my $fh;
        if($fn eq "-") {    # we already checked that this only occurs once
            $fh = *STDIN;
        }
        elsif(! (-f $fn && -r _ && -s _)) {
            print STDERR (  # E.g., if someone says -@ <dirname>
                "Filename ", make_printable($fn),
                " isn't something I can read names from.\n"
            );
            exit EXIT_PARAM_ERR;
        }
        elsif(!open($fh, "<:raw", $fn)) {
            print STDERR    # raw because NULL term
                "Couldn't open filename ", make_printable($fn), "\n";
            exit EXIT_PARAM_ERR;
        }

        local $/;   # Use file-slurp because split() trims trailing separators,
                    # which <$fh> with $/==$sTerm does not.
        my $file_contents = <$fh>;

        push(@retval, split($sTerm, $file_contents));
    } #foreach filename

    return \@retval;
} # read_entries()
# }}}2

__END__
# }}}1

# Documentation {{{2
=pod

=encoding UTF-8

=head1 NAME

ls0 - List filenames, with each output null-terminated.

=head1 SYNOPSIS

ls0 [options] [--] [pathspecs]

Run ls0 --help for options, or ls0 --man for full documentation.
By default, if no pathspecs or atfiles are given, ls0 will:

=over

=item if stdin is a tty,

list files in the current directory;

=item otherwise,

take NULL-separated input from stdin and list it.

=back

Example: C<< find . -name 'some*pattern' -print0 | ls0 -t >>
displays filenames matching C<some*pattern>, newest first,
even if those filenames contain special characters.

=head1 OPTIONS

=over

=item B<-a>

Also list files beginning with a '.'

=item B<-A>

Also list files beginning with a '.', except for '.' and '..'

=item B<-b>, B<--escape> (disable with B<--noescape>)

Print octal escapes for special characters and backslashes
(which are \134).
Implies B<--eol>
(newline terminators); also specify B<--noeol> if you still want null
terminators.

By default, output is escaped if standard output is a terminal.

If multiple escaping options are given, B<--noescape> controls (if specified).

=item B<-d>

List directories as directories; don't list their contents.  Overrides B<-R>.
Can't be used with B<--rglob>.

=item B<--eol> (disable with B<--noeol>)

Terminate output entries with a platform-specific end-of-line sequence
rather than a NULL.  May be useful with B<--glob>.

By default, the terminator is NULL unless B<--eol> is given or escaping is
active (by default or by B<-b> or B<--escape>).

If multiple escaping or terminator entries are given, B<--noeol> controls
(if specified).

=item B<< --from <atfile> >> (or B<< -@ <atfile> >>)

Read the pathspecs to be processed from B<atfile>; specify "-" to read from
standard input.  Each pathspec in B<atfile> should
be separated by a NULL terminator ('\0').  This is ls_0_, after all.
The input is read in binary mode, so filenames can contain any non-NULL
character.

See L</"Reading atfiles"> for details.

=item B<< --fromeol <atfile> >>

As B<--from>, but each pathspec in B<atfile>
should be separated by a platform-specific end-of-line.

See L</"Reading atfiles"> for details.

=item B<--glob>

Expand the provided pathspecs using perl's File::Glob::bsd_glob.
This is provided for shells that don't glob, or don't glob as you expect.
Make sure to quote the arguments if necessary to prevent your shell from
globbing before ls0 sees them.

=item B<--leaf>

Only list leaves, i.e., files plus directories for which no lower-level files
are being listed.

=item B<-r>

Reverse the order of the sort.  Cannot be used with B<-U> (unsorted listing).

=item B<-R>

Visit subdirectories recursively.  No effect if B<-d> is specified.

=item B<--rglob>

Glob in ls0 rather than (or in addition to) in the shell.  Try to glob
the pathspecs given on the command line in each directory visited.
Implies B<-R> and B<--glob>.  Can't be used with B<-d>.

=item B<-S>

Sort by file size, descending by default.

=item B<-t>

Sort by time, newest first (unless B<-r>).  Uses the modification time
unless B<--time> is given.

=item B<< --time <timeval> >>

Use B<< <timeval> >> as the time when sorting.  Run C<ls0 -t --time=?> to see
the list of available times.  At least B<atime>, B<ctime>, and B<mtime>
are available.

=item B<-U>

Don't sort the results - you get them in whatever order you get them.
This will likely be the breadth-first search order ls0 currently uses,
but you B<shall not> make any assumptions about name order when using
this option.  Cannot be used with B<-r>.

=item B<--xargs>

A convenient synonym for C<--from ->.  For example, instead of
C<find ... | xargs ls>, you can use C<find ... -print0 | ls0 --xargs>
to get the same effect with the benefits of (1) the safety NULL terminators
provide, and (2) support for a higher match count than the command line
can handle.

This is the default unless:
the input is a tty;
you have provided at least one pathspec on the command line; or
you have named at least one atfile on the command line.

=back

=head2 Reading atfiles

The B<--from> and B<--fromeol> options read atfiles and treat entries in those
files as if those entries had been specified on the command line.  Things to
bear in mind:

=over

=item *

Since entries are as if specified on the command line, they are subject to
B<-d>, B<-R>, and other options that affect how command-line parameters are
treated.  For example,
C<< echo 'foo/' | ls0 --fromeol - >> will list the
contents of directory C<foo>, whereas
C<< echo 'foo/' | ls0 --fromeol - -d >> (with B<-d>) will list the
name of directory C<foo>.

This may be an issue when piping C<find> output into ls0.  Unless you
exclude C<.> from the C<find> results, e.g., with

    find . -name '.' -o -print0

you are likely to see two listings for each file in the current directory:
one from the C<find> listing for that file, and one from when ls0 expands
C<.> into a list of its contents.

=item *

The filename C<-> refers to standard input.

=item *

You can't specify the same B<atfile> for more than one
B<--from> or B<--fromeol> option.

=item *

You B<shall not> make any assumptions about the relative order of items
listed on the command line or in atfiles.  In any case, the output order is
controlled only by any sorting options you provide.

=item *
B<--fromeol> does not unescape any
characters.  If you use this, make sure the filenames in B<atfile> don't
contain end-of-line characters.

=item *
B<--fromeol> uses the platform-specific newline sequence, e.g.,
C<\r>, C<\n>, or C<\r\n>.  If you try to read
DOS text files on a UNIX ls0, the input entries will have extra "\r"
characters at the end of them.

=back

=head1 DIFFERENCES BETWEEN GNU ls(1) and ls0(1)

=head2 New Features

=over

=item B<< --from <atfile> >>, B<< --fromeol <atfile> >>

Read input pathspecs from B<atfile>.

=item B<--glob>

Glob in ls0 rather than (or in addition to) in the shell.

=item B<--rglob>

Glob in ls0 rather than (or in addition to) in the shell, and glob in each
subdir.

=item B<--leaf>

Only list leaves.

=back

=head2 Unsupported ls(1) Features

The following GNU ls(1) options are not supported by ls0:

=over

=item B<-1> (print single line), B<-C> (list down columns),
B<-m> (comma-separated output), B<-x> (list across rows), B<--format>

We don't print these formats; we only support NULL and EOL as delimiters,
and don't do multicolumn.
Our B<-b> implies one line per file.

=item B<-F>/B<--file-type> (print indicators),
B<-N>/B<--literal> (print names literally), B<-q> (hide control chars),
B<-Q>/B<--quote-name> (quote output), B<--quoting-style>

We only print raw or with backslash escapes (B<-b>), so we don't support these.

=item B<--color>

Nope.  Sorry!

=item B<-D>

Long live vi!

=back

=head2 Differences in behaviour

=head3 Default search order

ls(1) sorts case-insensitively by default, e.g., C<alpha, BAR, foo, QUUX>.
We sort on byte values without regard to case or encoding, e.g. (in ASCII),
C<BAR, QUUX, alpha, foo>.

=head3 Output format for multiple subdirectories

When listing multiple directories, e.g., C<ls foo/ bar/>, ls(1) shows:

    foo:
    file_in_foo

    bar:
    file_in_bar

However, ls0(1) is intended for machine output, so it produces:

    foo
    foo/file_in_foo
    bar
    bar/file_in_bar

in whatever order you have specified by the sort options.  With B<-U>, for
example, you may get:

    foo
    bar
    foo/file_in_foo
    bar/file_in_bar

(the breadth-first order), although you may get a different order.

=head1 COPYRIGHT

Copyright (c) 2016 Chris White L<http://www.devwrench.com>
CC-BY-SA 3.0

Inspired by L<https://stackoverflow.com/a/41168189/2877364> by
myself, L<cxw|https://stackoverflow.com/users/2877364/cxw>.
Code based in part on L<http://stackoverflow.com/a/13999717/2877364> by
L<turningtaxis|http://stackoverflow.com/users/1922919/turningtaxis>
and on L<http://stackoverflow.com/a/3960071/2877364> by
L<ruel|http://stackoverflow.com/users/459338/ruel>.

=cut

# }}}2

# vi: set ts=4 sts=4 sw=4 et ai ff=unix fenc=utf8 foldmethod=marker foldenable foldlevel=1: #

